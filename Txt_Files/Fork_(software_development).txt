Fork (software development) - Wikipedia Fork (software development) From Wikipedia, the free encyclopedia Jump to navigation Jump to search A timeline chart of how Linux distributions have forked. In software engineering, a project fork happens when developers take a copy of source code from one software package and start independent development on it, creating a distinct and separate piece of software. The term often implies not merely a development branch, but also a split in the developer community, a form of schism.[1] Free and open-source software is that which, by definition, may be forked from the original development team without prior permission, without violating copyright law. However, licensed forks of proprietary software (e.g. Unix) also happen. Contents 1 Etymology 2 Forking of free and open-source software 3 Forking proprietary software 4 See also 5 References 6 External links Etymology[edit] The word "fork" has been used to mean "to divide in branches, go separate ways" as early as the 14th century.[2] In the software environment, the word evokes the fork system call, which causes a running process to split itself into two (almost) identical copies that (typically) diverge to perform different tasks.[3] In the context of software development, "fork" was used in the sense of creating a revision control "branch" by Eric Allman as early as 1980, in the context of SCCS:[4] Creating a branch "forks off" a version of the program. The term was in use on Usenet by 1983 for the process of creating a subgroup to move topics of discussion to.[5] "Fork" is not known to have been used in the sense of a community schism during the origins of Lucid Emacs (now XEmacs) (1991) or the BSDs (1993–1994); Russ Nelson used the term "shattering" for this sort of fork in 1993, attributing it to John Gilmore.[6] However, "fork" was in use in the present sense by 1995 to describe the XEmacs split,[7] and was an understood usage in the GNU Project by 1996.[8] Forking of free and open-source software[edit] Free and open-source software may be legally forked without prior approval of those currently developing, managing, or distributing the software per both The Free Software Definition and The Open Source Definition:[9] The freedom to distribute copies of your modified versions to others (freedom 3). By doing this, you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this. —?The Free Software Definition[10] 3. Derived Works: The license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software. —?The Open Source Definition[11] In free software, forks often result from a schism over different goals or personality clashes. In a fork, both parties assume nearly identical code bases, but typically only the larger group, or whoever controls the Web site, will retain the full original name and the associated user community. Thus, there is a reputation penalty associated with forking.[9] The relationship between the different teams can be cordial or very bitter. On the other hand, a friendly fork or a soft fork is a fork that does not intend to compete, but wants to eventually merge with the original. Eric S. Raymond, in his essay Homesteading the Noosphere,[12] stated that "The most important characteristic of a fork is that it spawns competing projects that cannot later exchange code, splitting the potential developer community". He notes in the Jargon File:[13] Forking is considered a Bad Thing—not merely because it implies a lot of wasted effort in the future, but because forks tend to be accompanied by a great deal of strife and acrimony between the successor groups over issues of legitimacy, succession, and design direction. There is serious social pressure against forking. As a result, major forks (such as the Gnu-Emacs/XEmacs split, the fissioning of the 386BSD group into three daughter projects, and the short-lived GCC/EGCS split) are rare enough that they are remembered individually in hacker folklore. David A. Wheeler notes[9] four possible outcomes of a fork, with examples: The death of the fork. This is by far the most common case. It is easy to declare a fork, but considerable effort to continue independent development and support. A re-merging of the fork (e.g., egcs becoming "blessed" as the new version of gcc.) The death of the original (e.g. the X.Org Server succeeding and XFree86 dying.) Successful branching, typically with differentiation (e.g., OpenBSD and NetBSD.) Distributed revision control (DVCS) tools have popularised a less emotive use of the term "fork", blurring the distinction with "branch".[14] With a DVCS such as Mercurial or Git, the normal way to contribute to a project, is to first create a personal branch of the repository, independent of the main repository, and later seek to have your changes integrated with it. Sites such as GitHub, Bitbucket and Launchpad provide free DVCS hosting expressly supporting independent branches, such that the technical, social and financial barriers to forking a source code repository are massively reduced, and GitHub uses "fork" as its term for this method of contribution to a project. Forks often restart version numbering from 0.1 or 1.0 even if the original software was at version 3.0, 4.0, or 5.0. An exception is when the forked software is designed to be a drop-in replacement for the original project, e.g. MariaDB for MySQL[15] or LibreOffice for OpenOffice.org. Forking proprietary software[edit] In proprietary software, the copyright is usually held by the employing entity, not by the individual software developers. Proprietary code is thus more commonly forked when the owner needs to develop two or more versions, such as a windowed version and a command line version, or versions for differing operating systems, such as a word processor for IBM PC compatible machines and Macintosh computers. Generally, such internal forks will concentrate on having the same look, feel, data format, and behavior between platforms so that a user familiar with one can also be productive or share documents generated on the other. This is almost always an economic decision to generate a greater market share and thus pay back the associated extra development costs created by the fork. A notable proprietary fork not of this kind is the many varieties of proprietary Unix—almost all derived from AT&T Unix under license and all called "Unix", but increasingly mutually incompatible.[16] See UNIX wars. The BSD licenses permit forks to become proprietary software, and copyleft proponents say that commercial incentives thus make proprietisation almost inevitable. (Copyleft licenses can, however, be circumvented via dual-licensing with a proprietary grant in the form of a Contributor License Agreement.) Examples include macOS (based on the proprietary NeXTSTEP and the open source FreeBSD), Cedega and CrossOver (proprietary forks of Wine, though CrossOver tracks Wine and contributes considerably), EnterpriseDB (a fork of PostgreSQL, adding Oracle compatibility features[17]), Supported PostgreSQL with their proprietary ESM storage system,[18] and Netezza's[19] proprietary highly scalable derivative of PostgreSQL. Some of these vendors contribute back changes to the community project, while some keep their changes as their own competitive advantages. See also[edit] List of software forks Source port Downstream (software development) Group decision-making Modular programming Modding Custom software Personalization Team effectiveness Duplicate code ROM Hacking References[edit] ^ "Schism", with its connotations, is a common usage, e.g. "the Lemacs/FSFmacs schism" Archived 12 December 2009 at WebCite (Jamie Zawinski, 2000), "Behind the KOffice split" Archived 6 July 2013 at the Wayback Machine (Joe Brockmeier, Linux Weekly News, 2010-12-14), "Copyright assignment - once bitten, twice shy" Archived 30 March 2012 at the Wayback Machine (Richard Hillesley, H-Online, 2010-08-06), "Forking is a feature" Archived 29 February 2012 at the Wayback Machine (Anil Dash, 2010-09-10), "The Great Software Schism" Archived 6 January 2012 at the Wayback Machine (Glyn Moody, Linux Journal, 2006-09-28), "To Fork Or Not To Fork: Lessons From Ubuntu and Debian" Archived 26 February 2012 at the Wayback Machine (Benjamin Mako Hill, 2005). ^ Entry 'fork' in Online Etymology Dictionary Archived 25 May 2012 at the Wayback Machine ^ "The term fork is derived from the POSIX standard for operating systems: the system call used so that a process generates a copy of itself is called fork()." Robles, Gregorio; González-Barahona, Jesús M. (2012). A Comprehensive Study of Software Forks: Dates, Reasons and Outcomes (PDF). OSS 2012 The Eighth International Conference on Open Source Systems. doi:10.1007/978-3-642-33442-9_1. Archived (PDF) from the original on 2 December 2013. Retrieved 20 October 2012. ^ Allman, Eric. "An Introduction to the Source Code Control System." Archived 6 November 2014 at the Wayback Machine Project Ingres, University of California at Berkeley, 1980. ^ Can somebody fork off a "net.philosophy"? (John Gilmore, net.misc, 18 January 1983) ^ Shattering — good or bad? (Russell Nelson, gnu.misc.discuss, 1 October 1993) ^ Re: Hey Franz: 32K Windows SUCK!!!!! (Bill Dubuque, cu.cs.macl.info, 21 September 1995) ^ Lignux? (Marcus G. Daniels, gnu.misc.discuss, 7 June 1996) ^ a b c Why Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)? Look at the Numbers!: Forking Archived 5 April 2006 at the Wayback Machine (David A. Wheeler) ^ Stallman, Richard. "The Free Software Definition". Free Software Foundation. Archived from the original on 14 October 2013. Retrieved 15 October 2013. ^ "The Open Source Definition". The Open Source Initiative. Archived from the original on 15 October 2013. Retrieved 15 October 2013. ^ Raymond, Eric S. (15 August 2002). "Promiscuous Theory, Puritan Practice". Archived from the original on 6 October 2006. ^ Forked Archived 8 November 2011 at the Wayback Machine (Jargon File), first added to v4.2.2 Archived 14 January 2012 at the Wayback Machine, 20 Aug 2000) ^ e.g. Willis, Nathan (15 January 2015). "An "open governance" fork of Node.js". LWN.net. Archived from the original on 21 April 2015. Retrieved 15 January 2015. Forks are a natural part of the open development model—so much so that GitHub famously plasters a "fork your own copy" button on almost every page. See also Nyman, Linus (2015). Understanding Code Forking in Open Source Software (Ph.D.). Hanken School of Economics. p. 57. hdl:10138/153135. Where practitioners have previously had rather narrow definitions of a fork, [...] the term now appears to be used much more broadly. Actions that would traditionally have been called a branch, a new distribution, code fragmentation, a pseudo-fork, etc. may all now be called forks by some developers. This appears to be in no insignificant part due to the broad definition and use of the term fork by GitHub. ^ Forked a project, where do my version numbers start? Archived 26 August 2011 at the Wayback Machine ^ Fear of forking Archived 17 December 2012 at the Wayback Machine - An essay about forking in free software projects, by Rick Moen ^ EnterpriseDB Archived 13 November 2006 at the Wayback Machine ^ Fujitsu Supported PostgreSQL Archived 20 August 2006 at the Wayback Machine ^ Netezza Archived 13 November 2006 at the Wayback Machine External links[edit] Right to Fork at Meatball Wiki A PhD examining forking: (Nyman, 2015) "Understanding Code Forking in Open Source Software - An examination of code forking, its effect on open source software, and how it is viewed and practiced by developers" v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Software packages Audio Bioinformatics Codecs Collaboration Configuration management Device drivers Graphics Wireless Geophysics Health Mathematics Operating systems Programming languages Routing Statistics Television Video games Web applications Content management systems E-commerce Word processors Android apps iOS apps Commercial Trademarked Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Organizations Events Licenses AFL Apache APSL Artistic Beerware Boost BSD CC0 CDDL EPL Free Software Foundation GNU GPL GNU LGPL ISC MIT MPL Ms-PL/RL Python Python Software Foundation License Sleepycat Unlicense WTFPL zlib Types and standards Comparison of free and open-source software licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Viral license Challenges Digital rights management Firmware security Hardware restrictions License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Secure boot Software patents Software security Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Free and open-source software portal Category Book Retrieved from "https://en.wikipedia.org/w/index.php?title=Fork_(software_development)&oldid=943162784" Categories: Software forks Software project management Hidden categories: Webarchive template webcite links Webarchive template wayback links Use dmy dates from January 2013 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page Print/export Create a book Download as PDF Printable version Languages ??????? Català ?eština Deutsch Español Euskara ????? Français ??? Hrvatski Italiano ????? Magyar Nederlands ??? Norsk bokmål Polski Português Român? ??????? Simple English Sloven?ina ?????? / srpski Suomi Svenska Türkçe ?????????? ?? Edit links This page was last edited on 29 February 2020, at 06:52 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Statistics Cookie statement Mobile view
