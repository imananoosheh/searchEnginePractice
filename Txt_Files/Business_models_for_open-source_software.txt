Business models for open-source software - Wikipedia Business models for open-source software From Wikipedia, the free encyclopedia Jump to navigation Jump to search Companies whose business center on the development of open-source software employ a variety of business models to solve the challenge of how to make money providing software that is by definition licensed free of charge. Each of these business strategies rests on the premise that users of open-source technologies are willing to purchase additional software features under proprietary licenses, or purchase other services or elements of value that complement the open-source software that is core to the business. This additional value can be, but not limited to, enterprise-grade features and up-time guarantees (often via a service-level agreement) to satisfy business or compliance requirements, performance and efficiency gains by features not yet available in the open source version, legal protection (e.g., indemnification from copyright or patent infringement), or professional support/training/consulting that are typical of proprietary software applications. Historically, these business models started in the late 1990s and early 2000s as “dual-licensing” models, for example MySQL,[1] and have matured over time to include many variations, as described in the sections below.  Pure dual licensing models are not uncommon, as a more nuanced business approach to open source software businesses has developed. Many of these variations are referred to a "open core” model, where the companies develop both open source software elements and other elements of value for a combined product. A variety of open-source compatible business approaches have gained prominence in recent years, as illustrated and tracked by the Commercial Open Source Software Index (COSSI),[2] a list of commercial open source companies that have reached at least $100 million USD in revenue. Notable examples include open core (sometimes referred to as dual licensing or multi-licensing), software as a service (not charging for the software but for the tooling and platform to consume the software as a service often via subscription), freemium, donation-based funding, crowdfunding, and crowdsourcing. There are several different types of business models for making profit using open-source software (OSS) or funding the creation and ongoing development and maintenance. Below are a list of current existing and legal commercial business models approaches in context of open-source software and open-source licenses.[3] The acceptance of these approaches varies; some of these approaches are recommended (like open core and selling services), others are accepted, while still others are considered controversial or even unethical by the open-source community. The underlying objective of these business models is to harness the size and international scope of the open-source community (typically more than an order of magnitude larger than what would be achieved with closed-source software equivalents) for a sustainable commercial venture.[citation needed] The vast majority of commercial open-source companies experience a conversion ratio (as measured by the percentage of downloaders who buy something) well below 1%, so low-cost and highly-scalable marketing and sales functions are key to these firms' profitability.[citation needed] Contents 1 Not selling code 1.1 Professional services 1.2 Branded merchandise 1.3 Software as a service 1.4 Voluntary donations 1.5 Crowdsourcing 2 Selling users 2.1 Partnership with funding organizations 2.2 Advertising-supported software 3 Pre-selling code 3.1 Bounty driven development 3.2 Pre-order/crowdfunding/reverse-bounty model 4 Selling intellectual property 4.1 Dual-licensing or Open Core 4.2 Selling certificates and use of trademark 4.3 Re-licensing under a proprietary license 5 Selling proprietary additives 5.1 Selling optional proprietary extensions 5.2 Selling required proprietary parts of a software product 5.3 Selling proprietary update systems 6 Other 6.1 Obfuscation of source code 6.2 Delayed open-sourcing 6.3 Open sourcing on end-of-life 7 Funding 8 Challenges 9 FOSS and economy 10 Examples 11 See also 12 References 13 Further reading Not selling code[edit] Professional services[edit] Open-source software can also be commercialized from selling services, such as training, technical support, or consulting, rather than the software itself.[4][5] Another possibility is offering open-source software in source code form only, while providing executable binaries to paying customers only, offering the commercial service of compiling and packaging of the software. Also, providing goods like physical installation media (e.g., DVDs) can be a commercial service. Open-source companies using this business model successfully are, for instance RedHat,[6] IBM, SUSE, Hortonworks (for Apache Hadoop), Chef, and Percona (for open-source database software). Branded merchandise[edit] Some open-source organizations such as the Mozilla Foundation[7] and the Wikimedia Foundation[8] sell branded merchandise articles like t-shirts and coffee mugs. This can be also seen as an additional service provided to the user community. Software as a service[edit] Selling subscriptions for online accounts and server access to customers is one way of adding value to open-source software. Another way is combining desktop software with a service, called software plus services. Most open core companies that use this approach also provide the software in a fashion suitable for on-premises, do-it-yourself deployment. To some customers, however, there is significant value in a “plug and play” hosted product. Open source businesses that use this model often cater to small and medium enterprises who do not have the technology resources to run the software. Providing cloud computing services or software as a service (SaaS) without the release of the open-source software is not an open source deployment. The FSF called the server-side use-case without release of the source-code the "ASP loophole in the GPLv2" and encourage therefore the use of the Affero General Public License which plugged this hole in 2002.[9][10] In 2007 the FSF contemplated including the special provision of AGPLv1 into GPLv3 but ultimately decided to keep the licenses separate.[11] Voluntary donations[edit] Main article: Donationware There were experiments by Independent developers to fund development of open-source software donation-driven directly by the users, e.g. with the Illumination Software Creator in 2012.[12] Since 2011, SourceForge allows users to donate to hosted projects that opted to accept donations, which is enabled via PayPal.[13] Larger donation campaigns also exist. In 2004 the Mozilla Foundation carried out a fundraising campaign to support the launch of the Firefox 1.0 web browser. It placed a two-page ad in the December 16 edition of The New York Times listing the names of the thousands who had donated.[14][15] In May 2019, GitHub, a Git-based software repository hosting, management and collaboration platform owned by Microsoft, launched a Sponsors program that allows people who support certain open source projects hosted on GitHub money to developers who contribute and maintain the project.[16] Crowdsourcing[edit] Crowdsourcing is a type of participative online activity in which an individual, an institution, a nonprofit organization, or company proposes to a group of individuals of varying knowledge, heterogeneity, and number, the voluntary undertaking of a task via a flexible open call. The undertaking of the task, of variable complexity and modularity, and in which the crowd should participate, bringing their work, money, knowledge and/or experience, always entails mutual benefit. The user will receive the satisfaction of a given type of need, be it economic, social recognition, self-esteem, or the development of individual skills, while the crowdsourcer will obtain and use to their advantage that which the user has brought to the venture, whose form will depend on the type of activity undertaken. Caveats in pursuing a Crowdsourcing strategy are to induce a substantial market model or incentive, and care has to be taken that the whole thing doesn't end up in an open source anarchy of adware and spyware plagiates, with a lot of broken solutions, started by people who just wanted to try it out, then gave up early, and a few winners. Popular examples for Crowdsourcing are Linux, Google Android, the Pirate Party movement, and Wikipedia. Selling users[edit] Partnership with funding organizations[edit] Other financial situations include partnerships with other companies. Governments, universities, companies, and non-governmental organizations may develop internally or hire a contractor for custom in-house modifications, then release that code under an open-source license. Some organizations support the development of open-source software by grants or stipends, like Google's Summer of Code initiative founded in 2005.[17] Advertising-supported software[edit] In order to commercialize FOSS (free and open-source software), many companies (including Google, Mozilla, and Canonical) have moved towards an economic model of advertising-supported software. For instance, the open-source application AdBlock Plus gets paid by Google for letting whitelisted Acceptable Ads bypassing the browser ad remover.[18] As another example is SourceForge, an open-source project service provider, has the revenue model of advertising banner sales on their website. In 2006, SourceForge reported quarterly takings of $6.5 million[19] and $23 million in 2009.[20] Pre-selling code[edit] Bounty driven development[edit] Main article: Open-source bounty The users of a particular software artifact may come together and pool money into an open-source bounty for the implementation of a desired feature or functionality. Offering bounties as funding has existed for some time. For instance, Bountysource is a web platform which has offered this funding model for open source software since 2003. Another bounty source is companies or foundations that set up bounty programs for implemented features or bugfixes in open-source software relevant to them. For instance, Mozilla has been paying and funding freelance open-source programmers for security bug hunting and fixing since 2004.[21][22][23] Pre-order/crowdfunding/reverse-bounty model[edit] A newer funding opportunity for open-source software projects is crowdfunding, which shares similarities with the pre-order or Praenumeration business model, as well as the reverse bounty model, typically organized over web platforms like Kickstarter,[24] Indiegogo,[25] or Bountysource[26] (see also comparison of crowd funding services). One example is the successfully funded Indiegogo campaign in 2013 by Australian programmer Timothy Arceri, who offered to implement an OpenGL 4.3 extension for the Mesa library in two weeks for $2,500.[25] Arceri delivered the OpenGL extension code which was promptly merged upstream, and he later continued his efforts on Mesa with successive crowdfunding campaigns.[27] Later, he found work as an employee in this domain with Collabora and in 2017 with Valve.[28] Another example is the June 2013 crowdfunding on Kickstarter[29][30] of the open source video game Cataclysm: Dark Days Ahead which raised the payment of a full-time developer for 3.5 months. Patreon funding has also become an effective option, as the service gives the option to pay out each month to creators, many of whom intend to develop free and open-source software.[31] Selling intellectual property[edit] Dual-licensing or Open Core[edit] Main articles: Open-core model and Multi-licensing In a dual licensing model, the vendor develops software and offers it under an open-source license but also under separate proprietary license terms. The proprietary version can be licensed to finance the continued development of the free open-source version.[32] Customers may prefer a no-cost and open-source edition for testing, evaluation, proof of concept development, and small scale deployment. If the customer wishes to deploy the software at scale, or in proprietary distributed products, the customer then negotiates for a commercial license to an enterprise edition. Further, customers will learn of open-source software in a company's portfolio and offerings but generate business in other proprietary products and solutions, including commercial technical support contracts and services. A popular example is Oracle's MySQL database which is dual-licensed under a commercial proprietary license as also under the GPLv2.[33] Another example is the Sleepycat License. Flask developer Armin Ronacher stated that the AGPLv3 was a "terrible success" as "vehicle for dual commercial licensing" and noted that MongoDB, RethinkDB, OpenERP, SugarCRM as well as WURFL utilizing the license for this purpose.[34] Dual license products are generally sold as a “community version” and an “enterprise version.” In a pure dual licensing model, as was common before 2010, these versions are identical but available under a choice of licensing terms. Added proprietary software may help customers analyze data, or more efficiently deploy the software on their infrastructure or platform. Examples include the IBM proprietary Linux software, where IBM contributes to the Linux open-source ecosystem, but it builds and delivers (to IBM's paying customers) database software, middleware, and other software that runs on top of the open-source core. Other examples of proprietary products built on open-source software include Red Hat Enterprise Linux and Cloudera's Apache Hadoop-based software. Selling certificates and use of trademark[edit] Main article: Franchising Another financing approach is innovated by Moodle, an open source learning management system and community platform.[35][36] The business model revolves around a network of commercial partners[37] who are certified and therefore authorised to use the Moodle name and logo,[38] and in turn provide a proportion of revenue to the Moodle Trust, which funds core development.[39] Re-licensing under a proprietary license[edit] If a software product uses only own software and open-source software under a permissive free software licence, a company can re-license the resulting software product under a proprietary license and sell the product without the source code or software freedoms.[40] For instance, Apple Inc. is an avid user of this approach by using source code and software from open-source projects. For example, the BSD Unix operating system kernel (under the BSD license) was used in Apple's Mac PCs that were sold as proprietary products.[41] Selling proprietary additives[edit] Selling optional proprietary extensions[edit] Main article: Open-core model Some companies sell proprietary but optional extensions, modules, plugins or add-ons to an open-source software product. This approach is a variant of the freemium business model. The proprietary software may be intended to let customers get more value out of their data, infrastructure, or platform, e.g., operate their infrastructure/platform more effectively and efficiently, manage it better, or secure it better. Examples include the IBM proprietary Linux software, where IBM contributes to the Linux open-source ecosystem, but it builds and delivers (to IBM's paying customers) database software, middleware, and other software that runs on top of the open-source core. Other examples of proprietary products built on open-source software include Red Hat Enterprise Linux and Cloudera's Apache Hadoop-based software. Some companies appear to re-invest a portion of their financial profits from the sale of proprietary software back into the open source infrastructure.[42] The approach can be problematic with many open source licenses ("not license conform") if not carried out technically sufficiently carefully. For instance, mixing proprietary code and open-source licensed code in statically linked libraries[43] or compiling all source code together in a software product might violate open-source licenses, while keeping them separated by interfaces and dynamic-link libraries might often adhere to license conform. Selling required proprietary parts of a software product[edit] A variant of the approach above is the keeping of required data content (for instance a video game's audio, graphic, and other art assets) of a software product proprietary while making the software's source code open-source. While this approach is completely legitimate and compatible with most open-source licenses, customers have to buy the content to have a complete and working software product.[44] Restrictive licenses can then be applied on the content, which prevents the redistribution or re-selling of the complete software product. Examples for open-source developed software are Kot-in-Action Creative Artel video game Steel Storm, engine GPLv2 licensed while the artwork is CC-BY-NC-SA 3.0 licensed,[45] and Frogatto & Friends with an own developed open-source engine[46] and commercialization via the copyrighted game assets[47] for iPhone, BlackBerry and MacOS.[48] Other examples are Arx Fatalis (by Arkane Studios)[49] and Catacomb 3-D (by Flat Rock Software)[50] with source code opened to the public delayed after release, while copyrighted assets and binaries are still sold on gog.com as digital distribution.[51] Doing so conforms with the FSF and Richard Stallman, who stated that for art or entertainment the software freedoms are not required or important.[52] The similar product bundling of an open-source software product with hardware which prevents users from running modified versions of the software is called tivoization and is legal with most open-source licenses except GPLv3, which explicitly prohibits this use-case.[53] Selling proprietary update systems[edit] Another variant of the approach above, mainly use for data-intensive, data-centric software programs, is the keeping of all versions of the software under a free and open-source software license, but refraining from providing update scripts from a n to an n+1 version. Users can still deploy and run the open source software. However, any update to the next version requires either exporting the data, reinstalling the new version, then reimporting the data to the new version, or subscribing to the proprietary update system, or studying the two versions and recreating the scripts from scratch. This practice does not conform with the free software principles as espoused by the FSF. Richard Stallman condemns this practice and names it "diachronically trapped software".[54] Other[edit] Obfuscation of source code[edit] An approach to allow commercialization under some open-source licenses while still protecting crucial business secrets, intellectual property and technical know-how is obfuscation of source code. This approach was used in several cases, for instance by Nvidia in their open-source graphic card device drivers.[55] This practice is used to get the open-source-friendly propaganda without bearing the inconveniences. There has been debate in the free-software/open-source community on whether it is illegal to skirt copyleft software licenses by releasing source code in obfuscated form, such as in cases in which the author is less willing to make the source code available. The general consensus was that while unethical, it was not considered a violation. The Free Software Foundation is against this practice.[56] The GNU General Public License since version 2 has defined "source code" as "the preferred form of the work for making modifications to it." This is intended to prevent the release of obfuscated source code.[57] Delayed open-sourcing[edit] Some companies provide the latest version available only to paying customers. A vendor forks a non-copyleft software project then adds closed-source additions to it and sells the resulting software. After a fixed time period the patches are released back upstream under the same license as the rest of the codebase. This business model is called version lagging or time delaying.[42][58] For instance, 2016 the MariaDB Corporation created for business compatible "delayed open-sourcing" the source-available Business source license (BSL) which automatically relicenses after three years to the FOSS GPL.[59][60] This approach guarantees licensees that they have source code access (e.g. for code audits), are not locked into a closed platform, or suffer from planned obsolescence, while for the software developer a time-limited exclusive commercialization is possible.[59] In 2017 followed version 1.1, revised with feedback also from Bruce Perens.[61][62] However, this approach works only with own software or permissive licensed code parts, as there is no copyleft FOSS license available which allows the time delayed opening of the source code after distributing or selling of a software product. Open sourcing on end-of-life[edit] See also: List of commercial software with available source code and List of commercial video games with available source code An extreme variant of "delayed open-sourcing" is a business practice popularized by id Software[63][64] and 3D Realms,[65][66] which released several software products under a free software license after a long proprietary commercialization time period and the return of investment was achieved. The motivation of companies following this practice of releasing the source code when a software reaches the commercial end-of-life, is to prevent that their software becomes unsupported Abandonware or even get lost due to digital obsolescence.[67] This gives the user communities the chance to continue development and support of the software product themselves as an open-source software project.[68] Many examples from the video game domain are in the list of commercial video games with later released source code. Popular non-game software examples are the Netscape Communicator which was open-sourced in 1998[69][70] and Sun Microsystems's office suite, StarOffice, which was released in October 2000 at its commercial end of life.[71] Both releases formed the basis of important open-source projects, namely Mozilla Firefox and OpenOffice.org/LibreOffice. However, Firefox eventually gained a more-than-self-sustaining revenue model, so Firefox was not an example of a commercial end-of-life release. Funding[edit] Unlike proprietary off-the-shelf software that come with restrictive licenses, open-source software is distributed freely, through the web and in physical media. Because creators cannot require each user to pay a license fee to fund development this way, a number of alternative development funding models have emerged. An example of those funding models is when bespoke software is developed as a consulting project for one or more customers who request it. These customers pay developers to have this software developed according to their own needs and they could also closely direct the developers' work. If both parties agree, the resulting software could then be publicly released with an open-source license in order to allow subsequent adoption by other parties. That agreement could reduce the costs paid by the clients while the original developers (or independent consultants) can then charge for training, installation, technical support, or further customization if and when more interested customers would choose to use it after the initial release. There also exist stipends to support the development of open source software, such as Google's Summer of Code[17] and Outreachy.[72] Another approach to funding is to provide the software freely, but sell licenses to proprietary add-ons such as data libraries. For instance, an open-source CAD program may require parts libraries which are sold on a subscription or flat-fee basis. Open-source software can also promote the sale of specialized hardware that it interoperates with, some example cases being the Asterisk telephony software developed by PC-telephony hardware manufacturer Digium and the Robot Operating System (ROS) robotics platform by Willow Garage and Stanford AI Labs. Many open source software projects have begun as research projects within universities, as personal projects of students or professors, or as tools to aid scientific research. The influence of universities and research institutions on open-source shows in the number of projects named after their host institutions, such as BSD Unix, CMU Common Lisp, or the NCSA HTTPd which evolved into Apache. Companies may employ developers to work on open-source projects that are useful to the company's infrastructure: in this case, it is developed not as a product to be sold but as a sort of shared public utility. A local bug-fix or solution to a software problem, written by a developer either at a company's request or to make his/her own job easier, can be released as an open-source contribution without costing the company anything.[73] A larger project such as the Linux kernel may have contributors from dozens of companies which use and depend upon it, as well as hobbyist and research developers. A new funding approach for open-source projects is crowdfunding, organized over web platforms like Kickstarter, Indiegogo, or Bountysource.[26] Challenges[edit] This article may need to be cleaned up. It has been merged from Commercial open-source applications. This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "Business models for open-source software" – news · newspapers · books · scholar · JSTOR (December 2013) (Learn how and when to remove this template message) Open-source software can be sold and used in general commercially. Also, commercial open-source applications have been a part of the software industry for some time.[74][75] While commercialization or funding of open-source software projects is possible, it is considered challenging.[76] Since several open-source licenses stipulate that authors of derivative works must distribute them under an open-source (copyleft) license, ISVs and VARs have to develop new legal and technical mechanisms to foster their commercial goals,[3] as many traditional mechanisms are not directly applicable anymore. Traditional business wisdom suggests that a company's methods, assets, and intellectual properties should remain concealed from market competitors (trade secret) as long as possible to maximize the profitable commercialization time of a new product.[77] Open-source software development minimizes the effectiveness of this tactic; development of the product is usually performed in view of the public, allowing competing projects or clones to incorporate new features or improvements as soon as the public code repository is updated, as permitted by most open-source licenses. Also in the computer hardware domain, a hardware producer who provides free and open software drivers reveals the knowledge about hardware implementation details to competitors, who might use this knowledge to catch up. Therefore, there is considerable debate about whether vendors can make a sustainable business from an open-source strategy. In terms of a traditional software company, this is probably the wrong question to ask. Looking at the landscape of open source applications, many of the larger ones are sponsored (and largely written) by system companies such as IBM who may not have an objective of software license revenues. Other software companies, such as Oracle and Google, have sponsored or delivered significant open-source code bases. These firms' motivation tends to be more strategic, in the sense that they are trying to change the rules of a marketplace and reduce the influence of vendors such as Microsoft. Smaller vendors doing open-source work may be less concerned with immediate revenue growth than developing a large and loyal community, which may be the basis of a corporate valuation at merger time FOSS and economy[edit] Main article: Open-source economics According to Yochai Benkler, the Berkman Professor for Entrepreneurial Legal Studies at Harvard Law School, free software is the most visible part of a new economy of commons-based peer production of information, knowledge, and culture. As examples, he cites a variety of FOSS projects, including both free software and open source.[78] This new economy is already under development. In order to commercialize FOSS, many companies, Google being the most successful, are moving towards an economic model of advertising-supported software. In such a model, the only way to increase revenue is to make the advertising more valuable. Facebook has recently come under fire for using novel user tracking methods to accomplish this.[79] This new economy is not without alternatives. Apple's App Stores have proven very popular with both users and developers. The Free Software Foundation considers Apple's App Stores to be incompatible with its GPL and complained that Apple was infringing on the GPL with its iTunes terms of use.[80] Rather than change those terms to comply with the GPL, Apple removed the GPL-licensed products from its App Stores.[81] The authors of VLC, one of the GPL-licensed programs at the center of those complaints, recently began the process to switch from the GPL to the LGPL and MPL.[82][83] Examples[edit] Main article: List of commercial open-source applications and services Much of the Internet runs on open-source software tools and utilities such as Linux, Apache, MySQL, and PHP, known as the LAMP stack for web servers.[citation needed] Using open source appeals to software developers for three main reasons: low or no cost, access to source code they can tailor themselves, and a shared community that ensures a generally robust code base, with quick fixes for new issues. Despite doing much business in proprietary software, some companies like Oracle Corporation and IBM participated in developing free and open-source software to deter from monopolies and take a portion of market share for themselves. See Commercial open-source applications for the list of current commercial open-source offerings. Netscape's actions were an example of this, and thus Mozilla Firefox has become more popular, getting market share from Internet Explorer. Active Agenda is offered for free, but requires all extensions to be shared back with the world community. The project sells a "Non-Reciprocal Private License" to anyone interested in keeping module extensions private. Adobe Systems offers Flex for free, while selling the Flash Builder IDE. Apple Inc. offers Darwin for free, while selling Mac OS X. Asterisk (PBX), digital electronics hardware controlled by open-source software Codeweavers sells CrossOver commercially, deriving it from the free Wine project they also back. Canonical Ltd. offers Ubuntu for free, while they sell commercial technical support contracts. Cloudera's Apache Hadoop-based software. Francisco Burzi offers PHP-Nuke for free, but the latest version is offered commercially. DaDaBIK, although following a donationware approach, requires a small, minimum donation fee, to be downloaded. IBM proprietary Linux software, where IBM delivers database software, middleware and other software. Ingres is offered for free, but services and support are offered as a subscription. The Ingres Icebreaker Appliance is also offered as a commercial database appliance. id Software releases their legacy game engines under the GPL, while retaining proprietary ownership on their latest incarnation. Mozilla Foundation have a partnership with Google and other companies which provides revenue for inclusion of search engines in Mozilla Firefox. MySQL is offered for free, but with the enterprise version includes support and additional features. SUSE offers openSUSE for free through the openSUSE Project, while selling SUSE Linux Enterprise (SLE). OpenSearchServer offers its community edition on SourceForge and an enterprise edition with professional services to enterprises with a paid license Oracle - VirtualBox is free and open to anyone, but the VirtualBox extension pack can only be used for free at home, thus requiring payment from business users OWASP Foundation is a professional community of open-source developers focused on raising visible for software security. Red Hat sells support subscriptions for Red Hat Enterprise Linux (RHEL) which is an enterprise distribution periodically forked from the community-developed Fedora. Sourcefire offers Snort for free, while selling Sourcefire 3D. Sun Microsystems (acquired by Oracle in 2010) once offered OpenOffice.org for free, while selling StarOffice Untangle provides its Lite Package for free, while selling its Standard and Premium Packages by subscription Zend Technologies offers Zend Server CE and Zend Framework for free, but sells Zend Server with support and additional features. See also[edit] Business and Economics portal Free software business model Open Source Development Labs Commercial use of copyleft works Open business Open innovation Crowdsourcing References[edit] ^ "MySQL :: Commercial License for OEMs, ISVs and VARs". www.mysql.com. Retrieved 2019-09-11. ^ "COSSI: $100M+ Revenue Commercial Open-Source Software Company Index". Google Docs. Retrieved 2019-08-28. ^ a b Popp, Dr. Karl Michael (2015). Best Practices for commercial use of open source software. Norderstedt, Germany: Books on Demand. ISBN 978-3738619096. ^ Germain, Jack M. (5 November 2013). "FOSS in the Enterprise: To Pay or Not to Pay?". LinuxInsider. ECT News Network, Inc. Retrieved 18 June 2016. ^ Rubens, Paul (13 February 2013). "6 Reasons to Pay for Open Source Software". CIO. CXO Media, Inc. Retrieved 18 June 2016. Open source software is free to download, modify and use, but that doesn't mean it's not worth paying for sometimes. If you're using open source software in a commercial, enterprise capacity, here are six reasons why you should pay for free software. ^ McMillan, Robert (28 March 2012). "Red Hat Becomes Open Source's First $1 Billion Baby". Wired. Retrieved 18 June 2016. Other companies have made big money selling Linux — Intel, IBM, Dell, and others have used it as a way to sell hardware and support services — but Red Hat has managed the tricky business of building a software platform that big businesses will pay for. ^ Markham, Gervase (16 March 2004). "Mozilla Foundation Open Letter Orders Unofficial Mozilla Merchandise Sellers to Stop, Legal Action Hinted". MozillaZine. Retrieved 18 June 2016. ^ "Wikipedia Store". Wikimedia Foundation. 2016. Retrieved 18 June 2016. ^ "Licenses". GNU Project. Free Software Foundation. The GNU Affero General Public License. Retrieved 18 June 2016. We recommend that people consider using the GNU AGPL for any software which will commonly be run over a network. ^ Tiemann, Michael (7 June 2007). "GNU Affero GPL version 3 and the "ASP loophole"". Open Source Initiative. Retrieved 18 June 2016. ^ "Frequently Asked Questions about the GNU Licenses". GNU Project. Free Software Foundation. 26 May 2016. Why did you decide to write the GNU Affero GPLv3 as a separate license?. Retrieved 18 June 2016. ^ Sneddon, Joey-Elijah (2012-06-01). "Will You Help Change The Way Open-Source Apps are Funded?". OMGUbuntu. Retrieved 2013-08-08. Lunduke is pledging to open-source and distribute his portfolio of hitherto paid software – which includes the Linux distro management simulator Linux Tycoon - for free, under the GPL, if he can reach a donation-driven funding goal of $4000/m. Reaching this goal, Lunduke says, 'will provide proof for others, who would also like to move their software businesses to be open source, that it is doable.' ^ Naramore, Elizabeth (4 March 2011). "SourceForge.net Donation System". SourceForge. Slashdot Media. Retrieved 16 October 2017. ^ Mozilla Foundation (December 15, 2004). "Mozilla Foundation Places Two-Page Advocacy Ad in The New York Times". Retrieved June 15, 2010. ^ Marson, Ingrid (2004-12-16). "New York Times runs Firefox ad". cnet.com. Retrieved 2013-08-12. Fans of the Mozilla Foundation's Firefox browser who funded an advertisement in The New York Times will finally get to see their names in print on Thursday. ^ Tung, Liam. "GitHub will now let you back your favourite open source developers". ZDNet. Retrieved 2019-08-26. ^ a b Byfield, Bruce (21 September 2005). "Google's Summer of Code concludes". linux.com. Retrieved 18 June 2016. DiBona said that the SOC was designed to benefit everyone involved in it. Students had the chance to work on real projects, rather than academic ones, and to get paid while gaining experience and making contacts. FOSS projects benefited from getting new code and having the chance to recruit new developers. ^ Callaham, John (2013-06-06). "Report: Google paying AdBlock Plus to not block Google's ads". neowin.com. Retrieved 2013-08-13. Google is paying money to Eyeo, the company behind AdBlock Plus, so that its ads get through the browser ad remover. ^ Hunt, Katherine (2007-05-24). "Sourceforge quarterly profit surges as revenue rises". marketwatch.com. Retrieved 2013-08-13. Software Corp., late Thursday reported third-quarter net earnings of $6.49 million, or 9 cents a share, up from $997,000, or 2 cents a share, during the year-ago period. Pro forma earnings from continuing operations were $2.1 million, or 3 cents a share, compared with $1.2 million, or 2 cents a share, last year. The Fremont, Calif.-based maker of computer servers and storage systems said revenue for the three months ended April 30 rose to $10.3 million from $7.9 million. Analysts, on average, had forecast a per-share profit of 2 cents on revenue of $12 million. ^ "SourceForge Reports Second Quarter Fiscal 2009 Financial Results". Archived from the original on 2015-06-03. ^ Leyden, John (2004-08-03), Mozilla to pay bounty on bugs, The Register, retrieved 2013-08-10 ^ Evers, Joris (July 25, 2005). "Offering a bounty for security bugs". CNET. CBS Interactive. Retrieved 12 August 2007. ^ "Mozilla Foundation Announces Security Bug Bounty Program". Mozilla Foundation. Mountain View, California. August 2, 2004. Retrieved 2013-08-10. ^ Lunduke, Bryan (2013-08-07). "Open source gets its own crowd-funding site, with bounties included - Bountysource is the crowd-funding site the open source community has been waiting for". networkworld.com. Retrieved 2013-08-10. Many open source projects (from phones to programming tools) have taken to crowd-funding sites (such as Kickstarter and indiegogo) in order to raise the cash needed for large-scale development. And, in some cases, this has worked out quite well. ^ a b Arceri, Timothy (2013-07-26). "Help improve OpenGL support for the Linux Graphics Drivers". Indiegogo. Retrieved 2013-08-11. Helping fund the time for me to become a Mesa contributor and document the experience to make it easier for others to understand where to start with the Mesa codebase. Many people have brought up the idea of crowd sourcing open source driver development. This is a small scale experiment to see if it could actually work. ^ a b "Bountysource Raises $1.1 Million for the First Crowdfunding Platform for Open-Source Software Projects". Yahoo Finance. Marketwired. 16 July 2013. Retrieved 18 June 2016. ^ Larabel, Michael (12 November 2013). "Crowd-Funding Is Back For Another Mesa Extension". Phoronix. ^ Larabel, Michael (14 February 2017). "Valve Has Another Linux Graphics Driver Developer Working On Open-Source AMD". Phoronix. ^ "Cataclysm: Dark Days Ahead - Dedicated Developer". Kickstarter. 22 June 2013. ^ "Multipocalyptic Roguelike Cataclysm: Dark Days Ahead Turns To Kickstarter". Archived from the original on 2014-04-01. ^ Marchant, Julie. "Julie Marchant is creating libre video games". Patreon. ^ Solatan, Jean (2011). Advances in software economics: A reader on business models and Partner Ecosystems in the software industry. Norderstedt, Germany: BOD. ISBN 978-3-8448-0405-8. ^ "Commercial License for OEMs, ISVs and VARs". MySQL.com. Oracle. July 2010. Q4: What is Oracle's dual license model for MySQL software?. Retrieved 18 June 2016. Oracle makes its MySQL database server and MySQL Client Libraries available under both the GPL and a commercial license. As a result, developers who use or distribute open source applications under the GPL can use the GPL-licensed MySQL software, and OEMs, ISVs and VARs that do not want to combine or distribute the MySQL software with their own commercial software under a GPL license can purchase a commercial license. ^ Ronacher, Armin (23 July 2013). "Licensing in a Post Copyright World". Armin Ronacher's Thoughts and Writings. What Changed in 2007. Retrieved 18 June 2016. The AGPLv3 was a terrible success, especially among the startup community that found the perfect base license to make dual licensing with a commercial license feasible. MongoDB, RethinkDB, OpenERP, SugarCRM as well as WURFL all now utilize the AGPLv3 as a vehicle for dual commercial licensing. The AGPLv3 makes that generally easy to accomplish as the original copyright author has the rights to make a commercial license possible but nobody who receives the sourcecode itself through the APLv3 inherits that right. I am not sure if that was the intended use of the license, but that's at least what it's definitely being used for now. ^ Gartner, Samantha (6 October 2014). "Moodle will always be an open source project". opensource.com. Retrieved 18 June 2016. ^ Dougiamas, Martin (22 January 2014). "Moodle: a case study in sustainability". OSS Watch. University of Oxford (published 5 June 2007). Retrieved 18 June 2016. ^ "How do the Moodle Partners work?". Moodle. 2012. Archived from the original on 22 July 2014. Retrieved 18 June 2016. ^ "The Moodle Trademark". Moodle. 2016. Retrieved 18 June 2016. ^ Kolowich, Steve (27 March 2012). "Blackboard's Open-Source Pivot". Inside Higher Ed. Retrieved 18 June 2016. ^ Montague, Bruce (2013-11-13). "Why you should use a BSD style license for your Open Source Project - GPL Advantages and Disadvantages". FreeBSD. Retrieved 2015-11-28. In contrast to the GPL, which is designed to prevent the proprietary commercialization of Open Source code, the BSD license places minimal restrictions on future behavior. This allows BSD code to remain Open Source or become integrated into commercial solutions, as a project's or company's needs change. In other words, the BSD license does not become a legal time-bomb at any point in the development process. In addition, since the BSD license does not come with the legal complexity of the GPL or LGPL licenses, it allows developers and companies to spend their time creating and promoting good code rather than worrying if that code violates licensing. ^ Oram, Andy (2011-08-26). "How Free Software Contributed to the Success of Steve Jobs and Apple". radar.oreilly.com. Retrieved 2013-08-10. the BSD license allowed Apple to keep its changes proprietary ^ a b Olson, Mike (13 November 2013). Opportunities Abound in the Big Data Space. Stanford eCorner. Stanford University. ^ Hustvedt, Eskild (2009-02-08). "Our new way to meet the LGPL". Archived from the original on 2009-02-20. Retrieved 2011-03-09. You can use a special keyword $ORIGIN to say 'relative to the actual location of the executable'. Suddenly we found we could use -rpath $ORIGIN/lib and it worked. The game was loading the correct libraries, and so was stable and portable, but was also now completely in the spirit of the LGPL as well as the letter! ^ "TTimo/doom3.gpl". GitHub. 2012-04-07. Retrieved 2013-08-10. Doom 3 GPL source release [...] This source release does not contain any game data, the game data is still covered by the original EULA and must be obeyed as usual. ^ "STEEL STORM EPISODE 1 LIMITED USER SOFTWARE LICENSE AGREEMENT". steel-storm.com. Retrieved 2013-08-10. For the purpose of this Agreement, the Art Assets include pk3 archive inside of 'steelstorm/gamedata/' folder that contain two-dimensional and three-dimensional works of graphic art, photographs, prints and art reproductions, maps, charts, diagrams, models, and technical drawings, sound effects and musical arrangements, documentation and tutorial videos, and are licensed under Attribution-NonCommercial-ShareAlike 3.0 Unported license. The Engine, which includes Windows, Linux and Mac binaries, and the Engine's source code, are licensed under GNU GPL v2 license. ^ Simpson, Kristina (2015-04-26). "LICENCE". anura-engine - GitHub. Retrieved 2015-10-10. ^ frogatto. "License". GitHub. CC-BY 3.0 LICENSE [...] assets under copyright ^ Gabovitch, Iwan (22 April 2011). "Humble Indie Bundle's Source Releases". Another game which is commercial (on iDevices) and has FOSS code and closed art [...] is Frogatto. ^ Nick (2011-01-14). "Arx Fatalis source code, patch released!". bethblog.com. Retrieved 2011-08-10. ^ Larabel, Michael (6 June 2014). "id Software's Softdisk Open-Sources Some Really Old Games". Phoronix. Retrieved 6 June 2014. ^ Ohle, Tom (4 December 2008). "Straight out of the Dungeon, Arx Fatalis invades GOG.com". Develop-Online.net (Press release). Warsaw, Poland. ^ Stallman, Richard (2012). "On-line education is using a flawed Creative Commons license". stallman.org. Retrieved 2013-08-10. In my view, nonfree licenses that permit sharing are ok for works of art/entertainment, or that present some party's viewpoint (such as this article itself). Those works aren't meant for doing a practical job, so the argument about the users' control does not apply. Thus, I do not object if they are published with the CC-BY-NC-ND license, which allows only noncommercial redistribution of exact copies. ^ "Eben Moglen, speaking about GPLv3 in Barcelona". ^ "gnu.org". www.gnu.org. Retrieved 2017-11-10. ^ Larabel, Michael (26 March 2010). "NVIDIA Drops Their Open-Source Driver, Refers Users To VESA Driver". Phoronix. The xf86-video-nv driver has been around that provides very basic 2D acceleration and a crippled set of features besides that (no proper RandR 1.2/1.3, KMS, power management, etc.) while the code has also been obfuscated to try to protect their intellectual property. ^ "What is free software?". Free Software Foundation. Obfuscated “source code” is not real source code and does not count as source code. ^ "Reasoning behind the "preferred form" language in the GPL". lwn.net. 2011-03-07. Retrieved 2013-08-19. ^ Sprewell (29 April 2010). "Towards A Real Business Model For Open-Source Software". Phoronix. ^ a b Martin, Alexander J (24 August 2016). "MySQL daddy Widenius: Open-source religion won't feed MariaDB". The Register. ^ Phipps, Simon (19 August 2016). "Uproar: MariaDB Corp. veers away from open source". InfoWorld. ^ sl-1-1 on perens.com (2017-02-14) ^ releasing-bsl-11 on mariadb.com by Kaj Arnö (2017) ^ "id Software releases Doom 3 source code". The H Open. 23 November 2011. Archived from the original on 8 December 2013. ^ Spencer, Spanner (24 March 2009). "id Software makes iPhone Wolfenstein open source". PocketGamer.co.uk. ^ Siegler, Joe (1 April 2005). "Shadow Warrior Source Code Released". 3D Realms. ^ "Games". 3D Realms. Selected games have had their source code released by us. These games are: Duke Nukem 3D, Shadow Warrior, Rise of the Triad, Word Whiz, Beyond the Titanic, Supernova, & Kroz. You can obtain these from our downloads page. ^ Andersen, John (2011-01-27). "Where Games Go To Sleep: The Game Preservation Crisis, Part 1". Gamasutra. Retrieved 2013-01-10. The existence of decaying technology, disorganization, and poor storage could in theory put a video game to sleep permanently – never to be played again. Troubling admissions have surfaced over the years concerning video game preservation. When questions concerning re-releases of certain game titles are brought up during interviews with developers, for example, these developers would reveal issues of game production material being lost or destroyed. Certain game titles could not see a re-release due to various issues. One story began to circulate of source code being lost altogether for a well-known RPG, preventing its re-release on a new console. ^ Bell, John (2009-10-01). "Opening the Source of Art". Technology Innovation Management Review. Archived from the original on 2014-03-30. Retrieved 2013-08-09. [...]that no further patches to the title would be forthcoming. The community was predictably upset. Instead of giving up on the game, users decided that if Activision wasn't going to fix the bugs, they would. They wanted to save the game by getting Activision to open the source so it could be kept alive beyond the point where Activision lost interest. With some help from members of the development team that were active on fan forums, they were eventually able to convince Activision to release Call to Power II's source code in October of 2003. ^ "NETSCAPE ANNOUNCES PLANS TO MAKE NEXT-GENERATION COMMUNICATOR SOURCE CODE AVAILABLE FREE ON THE NET". Netscape Communications Corporation. 1998-01-22. Archived from the original on 2007-04-01. Retrieved 2013-08-08. BOLD MOVE TO HARNESS CREATIVE POWER OF THOUSANDS OF INTERNET DEVELOPERS; COMPANY MAKES NETSCAPE NAVIGATOR AND COMMUNICATOR 4.0 IMMEDIATELY FREE FOR ALL USERS, SEEDING MARKET FOR ENTERPRISE AND NETCENTER BUSINESSES ^ "MOUNTAIN VIEW, Calif., April 1 /PRNewswire/ -- Netscape Communications and open source developers are celebrating the first anniversary, March 31, 1999, of the release of Netscape's browser source code to mozilla.org". Netscape Communications. 1999-03-31. Retrieved 2013-01-10. [...] The organization that manages open source developers working on the next generation of Netscape's browser and communication software. This event marked a historical milestone for the Internet as Netscape became the first major commercial software company to open its source code, a trend that has since been followed by several other corporations. Since the code was first published on the Internet, thousands of individuals and organizations have downloaded it and made hundreds of contributions to the software. Mozilla.org is now celebrating this one-year anniversary with a party Thursday night in San Francisco. ^ Proffitt, Brian (2000-10-13). "StarOffice Code Released in Largest Open Source Project". linuxtoday.com. Archived from the original on 2013-10-16. Retrieved 2013-01-10. Sun's joint effort with CollabNet kicked into high gear on the OpenOffice Web site at 5 a.m. PST this morning with the release of much of the source code for the upcoming 6.0 version of StarOffice. According to Sun, this release of 9 million lines of code under GPL is the beginning of the largest open source software project ever. ^ "Outreachy | Internships Supporting Diversity in Tech". www.outreachy.org. Retrieved 2019-11-28. ^ Holtgrewe, Ursula (March 2004). "Articulating the Speed(s) of the Internet: The Case of Open Source/Free Software". Time & Society. 13: 129–146. doi:10.1177/0961463X04040750. ^ Popp, Dr. Karl Michael; Meyer, Ralf (2010). Profit from Software Ecosystems: Business Models, Ecosystems and Partnerships in the Software Industry. Norderstedt, Germany: Books on Demand. ISBN 9783839169834. ^ Wheeler, David A. (February 2009). "F/LOSS is Commercial Software". Technology Innovation Management Review. Talent First Network. Retrieved 18 June 2016. ^ Stallman, Richard (11 March 2012). Richard Stallman (S20E10) (Podcast). The Linux Action Show. Jupiter Broadcasting. Event occurs at 0:53:46. Retrieved 18 June 2016. I'm not going to claim that I got a way to make it easier to raise money to pay people who write free software. We all know, that to some extent there are ways to do that, but we all know that they are limited, they are not as broad as we would like. ^ Donovan, S. (6 August 2002). "Patent, copyright and trade secret protection for software". IEEE Potentials (published 1994). 13 (3): 20. doi:10.1109/45.310923. ISSN 0278-6648. Essentially there are only three ways to protect computer software under the law: patent it, register a copyright for it, or keep it as a trade secret. ^ Benkler, Yochai (April 2003). "Freedom in the Commons: Towards a Political Economy of Information". Duke Law Journal. 52 (6). Archived from the original on 2011-03-06. Retrieved 2013-09-16. ^ ElBoghdady, Dina; Hayley Tsukayama (2011-09-30). "Facebook tracking prompts calls for FTC investigation". The Washington Post. Retrieved 23 October 2011. ^ Cheng, Jacqui (10 January 2011). "VLC for iOS vanishes 2 months after eruption of GPL dispute". Ars Technica. ^ Vaughan-Nichols, Steven. "No GPL Apps for Apple's App Store". Retrieved 23 October 2011. ^ "Changing the VLC engine license to LGPL". Retrieved 23 October 2011. ^ Johnston, Casey (18 July 2013). "VLC media player returns to the iOS App Store after 30-month hiatus". Ars Technica. Retrieved 10 October 2013. Further reading[edit] This further reading section may contain inappropriate or excessive suggestions that may not follow Wikipedia's guidelines. Please ensure that only a reasonable number of balanced, topical, reliable, and notable further reading suggestions are given; removing less relevant or redundant publications with the same point of view where appropriate. Consider utilising appropriate texts as inline sources or creating a separate bibliography article. (December 2015) (Learn how and when to remove this template message) Popp, Karl Michael (2015). "Open Source Business Models". Open Source Best Practices. Koenig, John (2004). "Seven Open Source Business Strategies for Commercial Advantage" (PDF). Riseforth. Archived from the original (PDF) on 2017-01-12. Retrieved 2014-10-18. Wheeler, David A. (14 June 2011). "Free-Libre / Open Source Software (FLOSS) is Commercial Software" (published 27 December 2006). "Selling Free Software". Free Software Foundation. 18 November 2016. Perens, Bruce (3 October 2005). "The emerging economic paradigm of Open Source". First Monday (2). Raya, Amadeu Albós; Martínez, Lluís Bru; Monsalve, Irene Fernández (September 2010). "Economic aspects and business models of Free Software" (PDF). Archived (PDF) from the original on 27 May 2016. Chang, Victor; Mills, Hugo; Newhouse, Steven (27 March 2014). "From Open Source to long-term sustainability: Review of Business Models and Case studies". University of Southampton (published 20 June 2007). Fink, Martin (2003). The Business and Economics of Linux and Open Source. Prentice Hall Professional. ISBN 9780130476777. Dornan, Andy (2 January 2008). "The Five Open Source Business Models". InformationWeek. Golden, Bernard (2005). "2: Open Source Business Models". Succeeding with Open Source. Boston: Addison-Wesley Professional. ISBN 9780321268532. Tapscott, Don; Williams, Anthony D. (December 2006). Wikinomics: How Mass Collaboration Changes Everything. Portfolio. ISBN 9781591841388. Retrieved from "https://en.wikipedia.org/w/index.php?title=Business_models_for_open-source_software&oldid=946140195" Categories: Business models Free software Free software culture and documents Software industry Economics of intellectual property Hidden categories: All articles with unsourced statements Articles with unsourced statements from October 2013 Articles needing additional references from December 2013 All articles needing additional references Articles with unsourced statements from December 2014 Wikipedia spam cleanup from December 2015 Wikipedia further reading cleanup Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page Print/export Create a book Download as PDF Printable version Languages Deutsch Français ??? Polski ??????? Edit links This page was last edited on 18 March 2020, at 09:57 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Statistics Cookie statement Mobile view
