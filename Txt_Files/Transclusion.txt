Transclusion - Wikipedia Transclusion From Wikipedia, the free encyclopedia Jump to navigation Jump to search For transclusion on Wikipedia, see Wikipedia:Transclusion. This article includes a list of references, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations. (January 2016) (Learn how and when to remove this template message) In this example, the data of file B is transcluded into the document A. In computer science, transclusion is the inclusion of part or all of an electronic document into one or more other documents by hypertext reference. Transclusion is usually performed when the referencing document is displayed, and is normally automatic and transparent to the end user.[1] The result of transclusion is a single integrated document made of parts assembled dynamically from separate sources, possibly stored on different computers in disparate places. Transclusion facilitates modular design: a resource is stored once and distributed for reuse in multiple documents. Updates or corrections to a resource are then reflected in any referencing documents. Ted Nelson coined the term for his 1980 nonlinear book Literary Machines, but the idea of master copy and occurrences was applied 17 years before, in Sketchpad. Contents 1 Technical considerations 1.1 Context neutrality 1.2 Parameterization 2 Origins 3 History and implementation by Project Xanadu 4 Implementation on the Web 4.1 Client-side HTML 4.2 Server-side transclusion 4.3 Transclusion of source code 5 See also 6 References 7 Further reading 8 External links Technical considerations[edit] Context neutrality[edit] Transclusion works better when transcluded sections of text are self-contained, so that the meaning and validity of the text is independent of context. For example, formulations like "as explained in the previous section" are problematic, because the transcluded section may appear in a different context, causing confusion. What constitutes "context neutral" text varies, but often includes things like company information or boilerplate. Parameterization[edit] Under some circumstances, and in some technical contexts, transcluded sections of text may not require strict adherence to the "context neutrality" principle, because the transcluded sections are capable of parameterization. Parameterization implies the ability to modify certain portions or subsections of a transcluded text depending on exogenous variables that can be changed independently. This is customarily done by supplying a transcluded text with one or more substitution placeholders. These placeholders are then replaced with the corresponding variable values prior to rendering the final transcluded output in context. Origins[edit] The concept of reusing file content began with computer programming languages: COBOL in 1960,[2] followed by BCPL, PL/I, C,[3] and by the 1990's, even FORTRAN.[4] An include directive allows common source code to be reused while avoiding the pitfalls of Copy-and-paste-programming and hard coding of constants. As with many innovations, a problem developed. Multiple include directives may provide the same content as another include directive, inadvertently causing repetitions of the same source code into the final result, resulting in a error. Include guards help solve this by, after a single inclusion of content, thereafter omit the duplicate content.[5] The idea of a single, reusable, source for information lead to concepts like: Don't repeat yourself and the abstraction principle. A further use was found to make programs more portable. Portable source code uses an include directive to specify a standard library, which contains system specific source code that varies with each computer environment.[6] History and implementation by Project Xanadu[edit] Ted Nelson, who also originated the words "hypertext" and "hypermedia", coined the term "transclusion" in his 1980 book Literary Machines. Part of his proposal was the idea that micropayments could be automatically exacted from the reader for all the text, no matter how many snippets of content are taken from various places. However, according to Nelson, the concept of transclusion had already formed part of his 1965 description of hypertext.[7] Nelson defines transclusion as, "...the same content knowably in more than one place," setting it apart from more special cases, such as the inclusion of content from a different location (which he calls transdelivery) or an explicit quotation that remains connected to its origins, (which he calls transquotation). Some hypertext systems, including Ted Nelson's own Xanadu Project, support transclusion.[8] Nelson has delivered a demonstration of Web transclusion, the Little Transquoter (programmed to Nelson's specification by Andrew Pam in 2004-2005).[9] It creates a new format built on portion addresses from Web pages; when dereferenced, each portion on the resulting page remains click-connected to its original context. Implementation on the Web[edit] HTTP, as a transmission protocol, has rudimentary support for transclusion via byte serving: specifying a byte range in an HTTP request message. Transclusion can occur either before (server-side) or after (client-side) transmission. For example: An HTML document may be pre-composed by the server before delivery to the client using Server-Side Includes or another server-side application. XML Entities or HTML Objects may be parsed by the client, which then requests the corresponding resources separately from the main document. A web browser may cache elements using its own algorithms, which can operate without explicit directives in the document's markup. AngularJS employs transclusion for nested directive operation.[10] Publishers of web content may object to the transclusion of material from their own web sites into other web sites, or they may require an agreement to do so. Critics of the practice may refer to various forms of inline linking as bandwidth theft or leeching. Other publishers may seek specifically to have their materials transcluded into other web sites, as in the form of web advertising, or as widgets like a hit counter or web bug. Mashups make use of transclusion to assemble resources or data into a new application, as by placing geo-tagged photos on an interactive map, or by displaying business metrics in an interactive dashboard. Client-side HTML[edit] HTML defines elements for client-side transclusion of images, scripts, stylesheets, other documents, and other types of media. HTML has relied heavily on client-side transclusion from the earliest days of the Web (so web pages could be displayed more quickly before multimedia elements finished loading), rather than embedding the raw data for such objects inline into a web page's markup. Through techniques such as Ajax, scripts associated with an HTML document can instruct a web browser to modify the document in-place, as opposed to the earlier technique of having to pull an entirely new version of the page from the web server. Such scripts may transclude elements or documents from a server after the web browser has rendered the page, in response to user input or changing conditions, for example. Future versions of HTML may support deeper transclusion of portions of documents using XML technologies such as entities, XPointer document referencing, and XSLT manipulations. XPointer is patented but is licensed under royalty-free terms.[11] Proxy servers may employ transclusion to reduce redundant transmissions of commonly requested resources. A popular Front End Framework known as AngularJS developed and maintained by Google has a directive callend ng-transclude that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion. Server-side transclusion[edit] Transclusion can be accomplished on the server side, as through Server Side Includes and markup entity references resolved by the server software. It is a feature of substitution templates. Transclusion of source code[edit] Transclusion of source code into software design or reference materials lets source code be presented within the document, but not interpreted as part of the document, preserving the semantic consistency of the inserted code in relation to its source codebase. See also[edit] Compound document Cross-reference Darwin Information Typing Architecture (DITA) and content reuse Macro (computer science) Object Linking and Embedding (OLE) Publish and Subscribe (Mac OS) Single source publishing Subroutine Include directive References[edit] ^ Glushko, Robert J., ed. (2013). The Discipline of Organizing. Cambridge, Massachusetts: MIT Press. p. 231. ISBN 9780262518505. ^ Initial Specifications for a COMMON BUSINESS ORIENTED LANGUAGE (COBOL) for Programming Electronic Digital Computers (PDF). Washington: Department of Defense. April 1960. pp. V-27. INCLUDE: Function: To save the programmer effort by automatically incorporating library subroutines into the source program. ^ Ritchie, Dennis M. (1993-03-01). "The development of the C language". ACM SIGPLAN Notices. 28 (3): 201–208. doi:10.1145/155360.155580. Archived from the original on 18 November 2015. Many other changes occurred around 1972-3, but the most important was the introduction of the preprocessor, partly at the urging of Alan Snyder [Snyder 74], but also in recognition of the utility of the the[sic] file-inclusion mechanisms available in BCPL and PL/I. Its original version was exceedingly simple, and provided only included files and simple string replacements: #include and #define of parameterless macros. Soon thereafter, it was extended, mostly by Mike Lesk and then by John Reiser, to incorporate macros with arguments and conditional compilation. The preprocessor was originally considered an optional adjunct to the language itself. ^ Adams, Jeanne C.; Brainerd, Walter S.; Martin, Jeanne T.; Smith, Brian T.; Wagener, Jerrold L. (1992). Fortran 90 Handbook: Complete ANSI / ISO Reference (PDF). New York City: McGraw-Hill Book Company. p. 65. ISBN 0-07-000406-4. Archived from the original (PDF) on 31 October 2018. The INCLUDE line is a new feature in Fortran that permits the inclusion of source code from a specified file. It is a convenient way to place the same text in several places in a program. ^ Stallman, Richard M.; Weinberg, Zachary. "Header Files" (PDF). The C Preprocessor: For gcc version 6.3.0 (GCC). pp. 10–11. Alternatives to Wrapper #ifndef : CPP supports two more ways of indicating that a header file should be read only once. Neither one is as portable as a wrapper ‘#ifndef’ and we recommend you do not use them in new programs, with the caveat that ‘#import’ is standard practice in Objective-C. [...] Another way to prevent a header file from being included more than once is with the ‘#pragma once’ directive. If ‘#pragma once’ is seen when scanning a header file, that file will never be read again, no atter what. ^ Johnson, S. C.; Ritchie, D. M. (July–August 1978). "UNIX time-sharing system: Portability of C programs and the UNIX system". The Bell System Technical Journal. 57 (6): 2021–2048. doi:10.1002/j.1538-7305.1978.tb02141.x. ISSN 0005-8580. Retrieved 27 February 2020. Even before the advent of the Interdata machine, it as realized, as mentioned above, that many programs depended to an undesirable degree not only on UNIX I/O conventions but on details of particularly favorable buffering strategies for the PDP-11. A package of routines, called the "portable I/O library," was written by M. E. Lesk and implemented on the Honeywell and IBM machines as well as the PDP-11 in a generally successful effort to overcome the deficiencies of earlier packagesCS1 maint: date format (link) ^ Theodor H. Nelson, "A File Structure for the Complex, the Changing and the Indeterminate." Proceedings of the ACM 20th National Conference (1965), pp. 84-100 ^ Kolbitsch, Josef; Maurer, Hermann (January 27, 2017). "Transclusions in an HTML-Based Environment" (PDF). Retrieved January 27, 2017. ^ The Little Transquoter Xanadu.com.au ^ "AngularJS". docs.angularjs.org. Retrieved 2016-08-11. ^ "XPointer Patent Statements". World Wide Web Consortium. Further reading[edit] Di Iorio, A.; Vitali, F. (August 2003). "A Xanalogical Collaborative Editing Environment" (PDF). Proceedings of the Second International Workshop of Web Document Analysis 2003 (WDA2003). Edinburgh, UK. Kolbitsch, J.; Maurer, H. (June 2006). "Transclusions in an HTML-Based Environment". Journal of Computing and Information Technology. 14 (2): 161–174. doi:10.2498/cit.2006.02.07. Archived from the original on 2007-06-06. Kolbitsch, J. (June 2005). "Fine-Grained Transclusions of Multimedia Documents in HTML". Journal of Universal Computer Science. 11 (6). Krottmaier, H. (2002). "Transcluded Documents: Advantages of Reusing Document Fragments" (PDF). Proceedings of the 6th International ICCC/IFIP Conference on Electronic Publishing (ELPUB2002). Czech Republic: Karlovy Vary. pp. 359–367. Archived from the original (PDF) on 2005-05-17. Krottmaier, H.; D., Helic (2002). "Issues of Transclusions" (PDF). Proceedings of the World Conference on E-Learning in Corporate, Government, Healthcare, & Higher Education (E-Learn 2002). Montreal, Canada. pp. 1730–1733. Krottmaier, H.; Maurer, H. (July 2001). "Transclusions in the 21st Century" (PDF, HTML, PostScript). Journal of Universal Computer Science. 7 (12): 1125–1136. CiteSeerX 10.1.1.106.9923. Moore, A.; et al. (2001). "Personally tailored teaching in WHURLE using conditional translucion". Proceedings of the Twelfth ACM Conference on Hypertext and Hypermedia. Aarhus, Danmark. pp. 163–164. Nelson, T. H. (1993) [1980]. Literary Machines. Mindful Press. Nelson, T. H. (1995). "The Heart of Connection: Hypermedia Unified by Transclusion". Communications of the ACM. 38 (8): 31–33. doi:10.1145/208344.208353. Nelson, T. H. (1996). "Generalized Links, Micropayment and Transcopyright". Almaden Research Center. Nelson, T. H. (1998). "Transcopyright: Pre-Permission for Virtual Republishing". Nelson, T. H. (1999). "Xanalogical Structure, Needed Now More than Ever: Parallel Documents, Deep Links to Content, Deep Versioning and Deep Re-Use". ACM Computing Surveys. 31 (4es): 33–es. CiteSeerX 10.1.1.418.7740. doi:10.1145/345966.346033. Pam, A. (1997). "Fine-Grained Transclusion in the Hypertext Markup Language" (Text). Internet Draft. Wilde, E.; Lowe, D. (2002). "Chapter 7: XML Linking Language". XPath, XLink, XPointer, and XML: A Practical Guide to Web Hyperlinking and Transclusion. Addison-Wesley Professional. pp. 169–198. External links[edit] Look up transclusion in Wiktionary, the free dictionary. Ted Nelson: Transclusion: Fixing Electronic Literature—on Google Tech Talks, 29 January 2007. Retrieved from "https://en.wikipedia.org/w/index.php?title=Transclusion&oldid=945452394" Categories: HTML Hypertext Metadata Ted Nelson Hidden categories: CS1 maint: date format Articles lacking in-text citations from January 2016 All articles lacking in-text citations Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page In other projects Wikimedia Commons Print/export Create a book Download as PDF Printable version Languages Català Dansk Deutsch Español ????? Français ??? Italiano Lëtzebuergesch Magyar Bahasa Melayu ??? Norsk bokmål Polski Português ??????? Simple English ?????????? ?? Edit links This page was last edited on 14 March 2020, at 01:47 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Statistics Cookie statement Mobile view
Joseph@John.gov.ca
